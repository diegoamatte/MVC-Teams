@model PaginatedList<Teams.ViewModels.Player.PlayerIndexViewModel>

@{
    ViewData["Title"] = "Index";
}

<h1 class="display-1 text-center mb-3">Players list</h1>

<div class="d-flex justify-content-between">
    <div>
        <form asp-action="Index" method="get">
            <div class="form-actions no-color">
                <div>
                    <div class="input-group mb-3">
                      <input type="text" class="form-control" placeholder="Find by player name or team name" class="form-control" name="SearchString" value="@ViewData["CurrentFilter"]">
                      <button type="submit" class="btn btn-primary"><i class="bi bi-search"></i> Search</button>
                      <a asp-action="Index" class="btn btn-light">Back to Full List</a>
                    </div>
                </div>
            </div>
        </form>
    </div>
    <div>
        <a class="btn btn-success" asp-action="Create"><i class="bi bi-plus-lg"></i> Create New</a>
    </div>
</div>


<div class="list-group">
    @foreach (var player in Model) {
        <div class="col">
            @await Html.PartialAsync("/Views/Players/_PlayerView.cshtml", player)
        </div>
    }
</div>


@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled":"";
    var nextDisabled = !Model.HasNextPage ? "disabled":"";
}

<div class="d-flex justify-content-end mt-2">
    <a asp-action="Index"
        asp-route-current-filter="@ViewData["CurrentFilter"]"
        asp-route-pageNumber="@(Model.PageIndex-1)"
        class="btn btn-default @prevDisabled">
        Previous
    </a>
    <a asp-action="Index"
        asp-route-current-filter="@ViewData["CurrentFilter"]"
        asp-route-pageNumber="@(Model.PageIndex+1)"
        class="btn btn-default @nextDisabled">
        Next
    </a>
</div>
